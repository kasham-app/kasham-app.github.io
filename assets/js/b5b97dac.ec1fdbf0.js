"use strict";(self.webpackChunkjetdocs=self.webpackChunkjetdocs||[]).push([[520],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(r),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[c]="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9206:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},i=void 0,u={unversionedId:"tutorial-basics/routing",id:"tutorial-basics/routing",title:"routing",description:"Routing in JET, the magnificent framework, begins by creating & defining routes in the routes directory in your application root.  The command below will generate a route file in your application",source:"@site/docs/tutorial-basics/routing.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/routing",permalink:"/1.1/docs/tutorial-basics/routing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"middlewares",permalink:"/1.1/docs/tutorial-basics/middlewares"}},s={},l=[],p={toc:l},c="wrapper";function d(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Routing in JET, the magnificent framework, begins by creating & defining routes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes")," directory in your application root.  The command below will generate a route file in your application\n",(0,o.kt)("inlineCode",{parentName:"p"},"/routes directory")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"root directory")," named web.php"),(0,o.kt)("admonition",{title:"Create Routes",type:"tip"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"php jet jet:generate-routes web\n"))),(0,o.kt)("p",null,"These routes are responsible for mapping URLs to specific actions in your application. Fear not, for I shall guide you through the enchanting world of routing."),(0,o.kt)("p",null,"At its core, a JET route consists of a URI and a Closure. This Closure is where the magic happens. Let's start with the most basic routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get('jet', function () {\n    return 'Hello jet!!';\n});\n\n$router->post('jet', function () {\n    // Your code here\n});\n")),(0,o.kt)("p",null,"These routes respond to the ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," HTTP verbs, respectively, and are associated with the URI ",(0,o.kt)("inlineCode",{parentName:"p"},"/foo"),"."),(0,o.kt)("p",null,"But behold, for JET offers a diverse array of router methods to handle any HTTP verb that comes your way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get($JetUrl, $JetCallback);\n$router->post($JetUrl, $JetCallback);\n$router->put($JetUrl, $JetCallback);\n$router->patch($JetUrl, $JetCallback);\n$router->delete($JetUrl, $JetCallback);\n$router->options($JetUrl, $JetCallback);\n")),(0,o.kt)("p",null,'Now, let us venture into the realm of route parameters. As you traverse the intricate paths of your application, you may need to capture segments of the URI. Fear not, for JET grants you the power to define route parameters by encasing them within "curly" braces:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get('user/{id}', function ($id) {\n    return 'User '.$id;\n});\n")),(0,o.kt)("p",null,"These route parameters shall be passed into your route's Closure when the route is executed, allowing you to access and utilize them in your code."),(0,o.kt)("p",null,"But heed this warning: route parameters cannot contain the ",(0,o.kt)("inlineCode",{parentName:"p"},'"-"')," character. Instead, embrace the power of the underscore ",(0,o.kt)("inlineCode",{parentName:"p"},"(_)")," to represent them."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Route Logo",src:r(3220).Z,width:"1366",height:"768"})),(0,o.kt)("p",null,"In your noble quest, you may encounter the need for optional route parameters. To achieve this, you can enclose a part of the route URI definition within square brackets (","[...]",'). For example, "/foo',"[bar]",'" will match both "/foo" and "/foobar". Note that optional parameters are only supported in a trailing position of the URI:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get('user[/{name}]', function ($name = null) {\n    return $name;\n});\n")),(0,o.kt)("p",null,"In your pursuit of perfection, you may wish to impose constraints on the format of your route parameters. JET understands your desires and allows you to define regular expression constraints within your route definitions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get('user/{name:[A-Za-z]+}', function ($name) {\n    // Your code here\n});\n")),(0,o.kt)("p",null,"As you delve deeper into the art of routing, you shall discover the power of named routes. By assigning a name to a specific route, you unlock the ability to generate URLs or redirects with ease. To bestow a name upon a route, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"as")," key in the route definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get('profile', ['as' => 'profile', function () {\n    // Your code here\n}]);\n")),(0,o.kt)("p",null,"Even the paths to controller actions can bear names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->get('profile', [\n    'as' => 'profile', 'uses' => 'UserController@showProfile'\n]);\n")),(0,o.kt)("p",null,"Once a route has been graced with a name, you can generate URLs or redirects to it using the mighty ",(0,o.kt)("inlineCode",{parentName:"p"},"route")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Generating URLs...\n$url = route('profile');\n\n// Generating Redirects...\nreturn redirect()->route('profile');\n")),(0,o.kt)("p",null,"If the named route defines parameters, you can pass the parameters as the second argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"route")," function. These parameters will automatically be inserted into the URL in their correct positions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"\n\n$router->get('user/{id}/profile', ['as' => 'profile', function ($id) {\n    // Your code here\n}]);\n\n$url = route('profile', ['id' => 1]);\n")),(0,o.kt)("p",null,"Now, let us delve into the wonders of route groups. With route groups, you can share attributes such as middleware or namespaces across multiple routes without repeating them. Behold the power of route groups!"),(0,o.kt)("p",null,"Middleware can be assigned to all routes within a group using the ",(0,o.kt)("inlineCode",{parentName:"p"},"middleware")," key in the group attribute array. The middleware will be executed in the order you define them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->group(['middleware' => 'auth'], function () use ($router) {\n    $router->get('/', function () {\n        // Uses Auth Middleware\n    });\n\n    $router->get('user/profile', function () {\n        // Uses Auth Middleware\n    });\n});\n")),(0,o.kt)("p",null,"Namespaces allow you to assign the same jsx namespace to a group of controllers. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"namespace")," parameter in the group attribute array to specify the namespace for all controllers within the group:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->group(['namespace' => 'Admin'], function() use ($router)\n{\n    // Using The \"App\\Http\\Controllers\\Admin\" Namespace...\n\n    $router->group(['namespace' => 'User'], function() use ($router) {\n        // Using The \"App\\Http\\Controllers\\Admin\\User\" Namespace...\n    });\n});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"prefix"),' group attribute can be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with "admin":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"$router->group(['prefix' => 'admin'], function () use ($router) {\n    $router->get('users', function () {\n        // Matches The \"/admin/users\" URL\n    });\n});\n")),(0,o.kt)("p",null,"You can also use the prefix parameter to specify common parameters for your grouped routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$router->group(['prefix' => 'accounts/{accountId}'], function () use ($router) {\n    $router->get('detail', function ($accountId) {\n        // Matches The \"/accounts/{accountId}/detail\" URL\n    });\n});\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Type responsibly:: do not take central nervous  depresant's before typing, as routes are very senstive")))}d.isMDXComponent=!0},3220:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/route-1-7450cafd5752666871187a83b128c1c9.png"}}]);