"use strict";(self.webpackChunkjetdocs=self.webpackChunkjetdocs||[]).push([[851],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const l={},a=void 0,i={unversionedId:"tutorial-basics/controllers",id:"tutorial-basics/controllers",title:"controllers",description:"The given code snippet represents a basic example of a controller class in a JET application. Controllers in JET are used to group related HTTP request handling logic into a class and are stored in the app/Http/Controllers directory.",source:"@site/docs/tutorial-basics/controllers.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/controllers",permalink:"/docs/tutorial-basics/controllers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"congratulations",permalink:"/docs/tutorial-basics/congratulations"},next:{title:"middlewares",permalink:"/docs/tutorial-basics/middlewares"}},s={},u=[],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The given code snippet represents a basic example of a controller class in a JET application. Controllers in JET are used to group related HTTP request handling logic into a class and are stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app/Http/Controllers")," directory."),(0,o.kt)("p",null,"Here's a breakdown of the provided code and some additional explanations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"namespace Bcoded\\Jet\\Http\\Controllers;\n\nuse Bcoded\\Jet\\Support\\Base\\JetController;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Bcoded\\Jet\\Support\\JetFacade as Jet;\nuse League\\Plates\\Engine as Jetview;\n\nclass LoginController extends JetController\n{\n    // Controller methods...\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The code begins with the definition of the namespace for the controller class."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"use")," statements import the necessary classes and dependencies for the controller."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"LoginController")," extends the ",(0,o.kt)("inlineCode",{parentName:"li"},"JetController")," class, which is included with the default JET installation. This allows you to inherit functionality and methods provided by the ",(0,o.kt)("inlineCode",{parentName:"li"},"JetController")," class."),(0,o.kt)("li",{parentName:"ul"},"Inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"LoginController")," class, you can define your controller methods to handle various HTTP requests.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"public function show($id)\n{\n    return User::findOrFail($id);\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"show")," method is an example of a controller method that retrieves a user based on the provided ",(0,o.kt)("inlineCode",{parentName:"li"},"$id")," parameter."),(0,o.kt)("li",{parentName:"ul"},"It uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"findOrFail")," method of the ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," model to find the user with the given ID."),(0,o.kt)("li",{parentName:"ul"},"The retrieved user is then returned as a response.")),(0,o.kt)("p",null,"Routing to the Controller:\nTo route requests to the controller's action method, you can define routes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/web.php")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$router->get('user/{id}', 'UserController@show');\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This route definition maps the ",(0,o.kt)("inlineCode",{parentName:"li"},"GET")," request to the URL path ",(0,o.kt)("inlineCode",{parentName:"li"},"user/{id}")," to the ",(0,o.kt)("inlineCode",{parentName:"li"},"show")," method of the ",(0,o.kt)("inlineCode",{parentName:"li"},"UserController"),"."),(0,o.kt)("li",{parentName:"ul"},"The route parameter ",(0,o.kt)("inlineCode",{parentName:"li"},"{id}")," will be passed to the ",(0,o.kt)("inlineCode",{parentName:"li"},"show")," method as an argument.")),(0,o.kt)("p",null,"Namespaces and Controller Routes:\nJET allows you to organize your controllers using PHP namespaces. If you have nested controllers in subdirectories, you can specify the class name relative to the root namespace (",(0,o.kt)("inlineCode",{parentName:"p"},"Bcoded\\Jet\\Http\\Controllers"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$router->get('foo', 'Photos\\PhotoController@method');\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This example demonstrates routing to the ",(0,o.kt)("inlineCode",{parentName:"li"},"method")," of the ",(0,o.kt)("inlineCode",{parentName:"li"},"PhotoController")," located at ",(0,o.kt)("inlineCode",{parentName:"li"},"Bcoded\\Jet\\Http\\Controllers\\Photos\\PhotoController"),".")),(0,o.kt)("p",null,"Naming Controller Routes:\nSimilar to Closure routes, you can specify names for controller routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$router->get('foo', ['uses' => 'FooController@method', 'as' => 'name']);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"as")," key allows you to provide a name for the route."),(0,o.kt)("li",{parentName:"ul"},"You can use the ",(0,o.kt)("inlineCode",{parentName:"li"},"route")," helper function to generate a URL to a named controller route.")),(0,o.kt)("p",null,"Controller Middleware:\nYou can assign middleware to the controller's routes using either the route definition or the controller's constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"$router->get('profile', [\n    'middleware' => 'auth',\n    'uses' => 'UserController@showProfile'\n]);\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the above example, the ",(0,o.kt)("inlineCode",{parentName:"li"},"'auth'")," middleware is assigned to the ",(0,o.kt)("inlineCode",{parentName:"li"},"'profile'")," route."),(0,o.kt)("li",{parentName:"ul"},"Alternatively, you can specify middleware within the constructor of the controller itself.")),(0,o.kt)("p",null,"Dependency Injection & Controllers:\nJET's service container allows for dependency injection in controllers. You can type-hint dependencies in the constructor or method parameters."),(0,o.kt)("p",null,"Constructor Injection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"public function __construct(Users $users)\n{\n    $this->users = $users;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"Users")," dependency is automatically resolved and injected into the ",(0,o.kt)("inlineCode",{parentName:"li"},"UserController")," instance.")),(0,o.kt)("p",null,"Method Injection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"public function store(Request $request)\n{\n    $name\n\n = $request->input('name');\n\n    // ...\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this example, the ",(0,o.kt)("inlineCode",{parentName:"li"},"Request")," instance is type-hinted in the ",(0,o.kt)("inlineCode",{parentName:"li"},"store")," method and automatically injected."),(0,o.kt)("li",{parentName:"ul"},"You can access the request data using the injected ",(0,o.kt)("inlineCode",{parentName:"li"},"$request")," object.")),(0,o.kt)("p",null,"Route Parameter & Method Injection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"public function update(Request $request, $id)\n{\n    // ...\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If your controller method expects input from both the request and a route parameter, you can list the dependencies accordingly."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"$id")," parameter represents the route parameter and follows the request dependency in the method signature.")))}d.isMDXComponent=!0}}]);